from requests import options
import streamlit as st
import pandas as pd
import numpy as np
from matplotlib import legend, pyplot as plt
from datetime import datetime as dt
import matplotlib.dates as mdates
from bokeh.plotting import figure, show
from bokeh.models import ColumnDataSource, HoverTool
import json
import folium
from folium.plugins import FastMarkerCluster
from streamlit_folium import folium_static

# descomentar para vers√£o online
#BASE_URL = "https://raw.githubusercontent.com/LFBossa/MapaSaudeSC/main/"
BASE_URL = "./"

st.set_page_config(  # layout="wide",
    page_title="Mapa da Sa√∫de SC",
    page_icon="üßä")

# Incid√™ncias

@st.cache
def get_dados():
    doen√ßas = pd.read_csv(BASE_URL + "parsed-data/saude-series.csv")
    popula√ß√£o = pd.read_csv(BASE_URL + "parsed-data/populacao.csv")
    regioes = pd.read_csv(BASE_URL + "data/geoloc/regioes-saude.csv",
                          dtype={"REGIAO": "category", "municipio": "str"})
    regioes.set_index("CODIBGE", inplace=True)
    popula√ß√£o["regi√£o"] = popula√ß√£o.COD_IBGE.apply(
        lambda x: regioes.loc[x, "REGIAO"])
    popula√ß√£o.set_index("COD_IBGE", inplace=True)

    def get_pop(ibge, year):
        if year == 2022:
            year -= 1
        return popula√ß√£o.loc[ibge, str(year)]

    def get_pop_df(row):
        return get_pop(row["Ibge"], row["ano"])

    doen√ßas["popula√ß√£o"] = doen√ßas.apply(get_pop_df, axis=1)
    doen√ßas["regi√£o"] = doen√ßas.Ibge.apply(lambda x: regioes.loc[x, "REGIAO"])

    return doen√ßas, popula√ß√£o, regioes


def pop_regiao(regiao, year):
    if year == 2022:
        year -= 1
    elif year == 2013:
        year += 1
    return popula√ß√£o_das_regi√µes.loc[regiao, str(year)]


def pop_estado(ano):
    if ano == 2022:
        ano -= 1
    elif ano == 2013:
        ano += 1
    return popula√ß√£o[str(ano)].sum()

# MAPA
@st.cache
def get_estabelecimentos():
    ST = pd.read_pickle(BASE_URL + "parsed-data/estabelecimentos.pd.pkl")
    ST.set_index("CNES", inplace=True)
    ST["label"] = ST["NOME FANTASIA"]
    return ST


@st.cache(allow_output_mutation=True)
def get_geojson():
    PATH = BASE_URL + "data/geoloc/boundaries-simplified.json"
    try:
        with open(PATH) as fp:
            geojson = json.load(fp)
    except:
        contents = requests.get(PATH).text
        geojson = json.loads(contents)
    return geojson


@st.cache
def get_doencas():
    doencas = pd.read_csv(BASE_URL + "parsed-data/doencas2.csv")
    return doencas


@st.cache
def get_populacao():
    populi = pd.read_csv(BASE_URL + "parsed-data/populacao.csv")
    populi.set_index("COD_IBGE", inplace=True)
    return populi


@st.cache
def get_incidencia(doenca, ano):
    populacao = get_populacao()
    doencas = get_doencas()
    serie = doencas.query(f"ano == {ano}").set_index("Ibge")[doenca]
    a = serie.div(populacao[f"{ano}"])*1000
    df = pd.DataFrame({"IBGE": a.index.values, "incid√™ncia": a.values})
    return df


st.sidebar.write("# Abas")
MAIN_SWITCH = st.sidebar.radio("Escolha o tipo de visualiza√ß√£o", ["Mapa", "S√©rie"])
st.sidebar.write("## Filtros")



if MAIN_SWITCH == "S√©rie":
    
    doen√ßas, popula√ß√£o, regioes = get_dados()

    popula√ß√£o_das_regi√µes = popula√ß√£o.groupby("regi√£o").sum()


    doenca_select = st.sidebar.selectbox(
        label="Selecione a doen√ßa", options=doen√ßas.columns[1:13])

    municipio_select = st.sidebar.selectbox(label="Selecione o munic√≠pio",
                                            options=regioes.index, format_func=lambda x: regioes.loc[x, "municipio"].title())

    cidade_label = regioes.loc[municipio_select, "municipio"].title()
    codibge = municipio_select
    regiao = regioes.loc[int(codibge), "REGIAO"]
    doen√ßa = doenca_select
    pvt_doen√ßa_regi√£o = pd.pivot_table(
        doen√ßas[["referencia", "regi√£o", doen√ßa]], index="referencia", columns="regi√£o", aggfunc=sum)[(doen√ßa, regiao)]
    popula√ß√£o_regi√£o = [pop_regiao(regiao, ano)
                        for ano in (pvt_doen√ßa_regi√£o.index.values // 100)]
    pvt_doen√ßa_estado = pd.pivot_table(
        doen√ßas[["referencia", doen√ßa]], index="referencia",  aggfunc=sum)[doen√ßa]
    popula√ß√£o_estado = [pop_estado(ano) for ano in (
        pvt_doen√ßa_estado.index.values // 100)]


    sr_doen√ßa_cidade = doen√ßas.query(
        f"Ibge == {codibge}").set_index("referencia")[doen√ßa]
    sr_popula√ß√£o_cidade = doen√ßas.query(
        f"Ibge == {codibge}").set_index("referencia")["popula√ß√£o"]

    dadddos = pd.concat([sr_doen√ßa_cidade/sr_popula√ß√£o_cidade*1000,
                        pvt_doen√ßa_regi√£o/popula√ß√£o_regi√£o*1000,
                        pvt_doen√ßa_estado/popula√ß√£o_estado*1000], axis=1).sort_index().reset_index()
    datas = [dt.strptime(str(x), "%Y%m") for x in dadddos["referencia"].values]
    dadddos["referencia"] = datas
    dadddos.set_index("referencia", inplace=True)
    dadddos.columns = [cidade_label, regiao, "SC"]

    source = ColumnDataSource(dadddos)
    TOOLTIPS = HoverTool(
        tooltips=[
            ("data", "@referencia{%F}"),
            ("cidade", f"@{{{cidade_label}}}"),
            ("regi√£o", f"@{{{regiao}}}"),
            ("estado", f"@{{SC}}"),
        ],
        formatters={
            '@referencia': 'datetime',  # use 'datetime' formatter for '@date' field
        },)

    p = figure(title=f"√çndice de {doen√ßa} para cada mil habitantes em {cidade_label}",
            x_axis_type='datetime')
    p.line(x="referencia", y=cidade_label, source=source,
        line_color="red", legend_label=cidade_label, line_width=2)
    p.line(x="referencia", y=regiao, source=source,
        legend_label=regiao, alpha=0.7)
    p.line(x="referencia", y="SC", source=source,
        legend_label="SC", alpha=0.6, line_dash="dashed",line_color="black")
    p.add_tools(TOOLTIPS)
    p.legend.location = 'top_left'

    f"""# Incid√™ncia de casos
Comparando o n√∫mero de atendimento de casos de {doen√ßa} em {cidade_label} com dados regionais e estaduais.
    """
    st.bokeh_chart(p, use_container_width=True)
else:
    DOENCAS = get_doencas()
    POPULACAO = get_populacao()
    ESTABELECIMENTOS = get_estabelecimentos()
 

    tipo_unidade = ESTABELECIMENTOS.tipo_unidade.unique()
    tipo_unidade_selectbox = st.sidebar.multiselect(
        "Escolha o tipo de unidade", tipo_unidade)

    #all_options = st.sidebar.checkbox("Selecionar todas")

    # if all_options:
    #    tipo_unidade_selectbox = tipo_unidade


    def retrieve_data(line):
        return line["lat"], line["lon"], line["label"]


    def ping_points():
        callback = """\
        function (row) {
            var marker;
            marker = L.marker(new L.LatLng(row[0], row[1]));
            marker.bindPopup(`<b>${row[2]}</b>`)
            return marker;
        };
        """
        m = folium.Map([-27.2958165,-50.5933218], zoom_start=7.4,tiles="Stamen Toner")
        for x in tipo_unidade_selectbox:
            subconjunto = ESTABELECIMENTOS.query(f"tipo_unidade == '{x}'")
            dados = subconjunto.apply(retrieve_data, axis=1)
            FastMarkerCluster(dados, callback=callback,
                            name=x).add_to(m)
        return m

    doenca_selecionada = st.sidebar.selectbox(
        "Selecione a doen√ßa", DOENCAS.columns[2:])
    ano_selecionado = st.sidebar.slider(
        "Selecione o ano de interesse", min_value=2014, max_value=2021)

    m = ping_points()

    filtrados_doenca = get_incidencia(doenca_selecionada, ano_selecionado)


    GEOJSON = get_geojson()

    for i, x in enumerate(GEOJSON["features"]):
        try: 
            objeto = x["properties"] 
            idx = objeto["id"]
            indice = filtrados_doenca.query(f"IBGE == {idx}")["incid√™ncia"].values[0]
            objeto.update({"incid√™ncia": "{:0.3f}".format(indice).replace(".",",")})
            #objeto = GEOJSON["features"][i]["properties"]
            #objeto["incid√™ncia"] =  indice
        except KeyError:
            pass
            #print(idx)


    mapinha = folium.Choropleth(
        geo_data=GEOJSON,
        name=doenca_selecionada,
        data=filtrados_doenca,
        columns=["IBGE", "incid√™ncia"],
        key_on="feature.properties.id",
        bins=7,
        fill_color="OrRd",
        fill_opacity=0.5,
        line_opacity=0.1,
        highlight=True,
        legend_name=f"{doenca_selecionada} (casos/mil hab.)"
    )


    f"""# Mapa da Sa√∫de SC

Mapa comparativo do total de casos de  {doenca_selecionada} no ano de {ano_selecionado}.
    """
    mapinha.add_to(m)

    folium.GeoJson(GEOJSON,
        control=False,
        style_function=lambda x: {'fillOpacity': 0.0, 'stroke': False},
        popup=folium.GeoJsonPopup(fields=["name","incid√™ncia"])
    ).add_to(m)

    folium.LayerControl().add_to(m)

    folium_static(m,  width=800, height=500)

"""
Esse applicativo cont√©m dados obtivos pelo Sistema de informa√ß√£o em Sa√∫de para a Aten√ß√£o B√°sica 
[SISAB](https://sisab.saude.gov.br/paginas/acessoRestrito/relatorio/federal/saude/RelSauProducao.xhtml), sobre atendimentos individuais para 
as doen√ßas listadas. 

Dados de popula√ß√£o obtidos do sistema [SIDRA](https://sidra.ibge.gov.br/tabela/6579) do IBGE.

Geocodifica√ß√£o de endere√ßos e fronteiras de cidades foi feita usando a API [CEP aberto](https://www.cepaberto.com/) e [Nominatim](https://nominatim.org/).
"""

"""> Criado por  [Bossa](https://github.com/LFBossa) do [LABMAC](http://labmac.mat.blumenau.ufsc.br/)
> para o *Projeto Qualifica√ß√£o Profissional e de Gestores de Santa Catarina em [DCNT](https://dcnt.paginas.ufsc.br/)* """